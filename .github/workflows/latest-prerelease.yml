name: Update Latest Prerelease

on:
  push:
    branches:
      - main # Replace with the branch you want to track

permissions:
  contents: write # Required for creating and updating releases

jobs:
  update_latest_release:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Zig
      - name: Install Zig
        run: |
          curl -LO https://ziglang.org/download/0.13.0/zig-linux-x86_64-0.13.0.tar.xz
          tar -xf zig-linux-x86_64-0.13.0.tar.xz
          mv zig-linux-x86_64-0.13.0 zig

      # Build the project
      - name: Build with Zig
        run: |
          ./zig/zig build
          ls -l zig-out/bin  # Verify the build output

      # Get the latest commit info
      - name: Get Commit Info
        id: commit_info
        run: |
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "message=$(git log -1 --pretty=%B | base64 -w 0)" >> $GITHUB_ENV

      # Check if "latest" prerelease exists and delete it
      - name: Check and Delete Existing Latest Prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/latest)
          release_id=$(echo "$response" | jq '.id')

          if [[ "$release_id" != "null" ]]; then
            # Delete the release
            curl -X DELETE \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
            
            # Delete the tag
            curl -X DELETE \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/latest"
          fi

      # Create a new "latest" prerelease
      - name: Create Latest Prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          decoded_message=$(echo "$message" | base64 -d)
          response=$(curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "$(jq -n --arg sha "$sha" --arg message "$decoded_message" '{
              tag_name: "latest",
              target_commitish: $sha,
              name: "Latest Prerelease",
              body: "Automatically updated to latest commit:\n\n\($message)",
              draft: false,
              prerelease: true
            }')")
          echo "release_id=$(echo "$response" | jq '.id')" >> $GITHUB_ENV

      # Upload the build file to the release
      - name: Upload Build File
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -H "Content-Type: application/wasm" \
            --data-binary @zig-out/bin/libjaime.wasm \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.release_id }}/assets?name=libjaime.wasm"
